{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/openapikit\/validator"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Validator"}],"platforms":["Linux"]}]},{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"The default Validator will perform a set of default validations","type":"text"},{"text":" ","type":"text"},{"text":"that catch OpenAPI Specification violations not possible (or inconvenient) to","type":"text"},{"text":" ","type":"text"},{"text":"prevent using the Swift type-system.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let document = OpenAPI.Document(...)","let validator = Validator()","try document.validate(using: validator)","","\/\/ or, equivalently for the default validator:","try document.validate()"]},{"type":"paragraph","inlineContent":[{"text":"The default validations are","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Operations must contain at least one response.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Document-level tag names are unique.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parameters are unique within each Path Item."}]}]},{"content":[{"inlineContent":[{"text":"Parameters are unique within each Operation.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Operation Ids are unique across the whole Document."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All OpenAPI.References that refer to components in this"},{"type":"text","text":" "},{"type":"text","text":"document can be found in the components dictionary."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"If you want a Validator that won’t perform any","type":"text"},{"text":" ","type":"text"},{"text":"validations except the ones you add, use","type":"text"},{"text":" ","type":"text"},{"code":"Validator.blank","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can add validations to the validator using the","type":"text"},{"text":" ","type":"text"},{"code":"validating()","type":"codeVoice"},{"text":" instance methods.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"There are a few default validations that ship with OpenAPIKit but","type":"text"},{"text":" ","type":"text"},{"text":"are not used unless explicitly added to a Validator. You can find these","type":"text"},{"text":" ","type":"text"},{"text":"validations as static members of the ","type":"text"},{"type":"codeVoice","code":"Validation"},{"text":" type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Example","type":"text"}]}]},{"syntax":null,"type":"codeListing","code":["let document = OpenAPI.Document(...)","let validator = Validator()","    .validating(.documentContainsPaths)","    .validating(.pathsContainOperations)","try document.validate(using: validator)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At their core, all validations are values of the "},{"type":"codeVoice","code":"Validation"},{"type":"text","text":" "},{"type":"text","text":"type. You can create validations by initializing the "},{"type":"codeVoice","code":"Validation"},{"type":"text","text":" "},{"type":"text","text":"type directly but it is generally more convenient to add validations"},{"type":"text","text":" "},{"type":"text","text":"to a Validator using one of the convenience "},{"type":"codeVoice","code":"validating()"},{"type":"text","text":" "},{"type":"text","text":"methods that know how to construct "},{"type":"codeVoice","code":"Validation"},{"type":"text","text":" on your behalf."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you can construct validation methods for simple equalities"},{"type":"text","text":" "},{"type":"text","text":"and inequalities by specifying the KeyPath from any OpenAPI type to"},{"type":"text","text":" "},{"type":"text","text":"the value you want to validate and then writing the equality\/inequality"},{"type":"text","text":" "},{"type":"text","text":"that must succeed for the validation to pass."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example"}]}]},{"syntax":null,"type":"codeListing","code":["let validator = Validator()","    .validating(","        \"API version is 2.0\",","        check: \\OpenAPI.Document.Info.version == \"2.0\"",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause to any validation as long as the "},{"type":"codeVoice","code":"check"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause both examine the same type (i.e. "},{"type":"codeVoice","code":"OpenAPI.Document.Info"},{"type":"text","text":" "},{"type":"text","text":"from the previous example and "},{"type":"codeVoice","code":"OpenAPI.Document"},{"type":"text","text":" from the next example)."}]},{"type":"paragraph","inlineContent":[{"text":"The next example also uses ","type":"text"},{"type":"codeVoice","code":"take()"},{"text":"  in its ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" caluse. This allows you to","type":"text"},{"text":" ","type":"text"},{"text":"dig into a value based on its KeyPath just like the previous example but you can","type":"text"},{"text":" ","type":"text"},{"text":"use it for more complicated criteria than equality\/inequality.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, the next example also introduces the context access KayPath syntax in its"},{"type":"text","text":" "},{"code":"check","type":"codeVoice"},{"type":"text","text":" clause. This syntax allows you to access the entire OpenAPI Document"},{"type":"text","text":" "},{"type":"text","text":"that is being validated as "},{"code":"\\.document","type":"codeVoice"},{"type":"text","text":". It also gives you access to the current value"},{"type":"text","text":" "},{"type":"text","text":"being validated as "},{"code":"\\.subject","type":"codeVoice"},{"type":"text","text":" and the current key path as "},{"code":"\\.codingPath","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"syntax":null,"type":"codeListing","code":["let validator = Validator()","    .validating(","        \"At least two servers are specified if one of them is the test server.\",","        check: \\.document.servers.count >= 2,","        when: take(\\OpenAPI.Document.servers) { servers in","            servers.map { $0.url.absoluteString }.contains(\"https:\/\/test.server.com\")","        }",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Context access, the "},{"type":"codeVoice","code":"take()"},{"type":"text","text":" method, and the inequality KeyPath syntax are all"},{"type":"text","text":" "},{"type":"text","text":"allowed in both the "},{"type":"codeVoice","code":"check"},{"type":"text","text":" and "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses. Just keep in mind that if you"},{"type":"text","text":" "},{"type":"text","text":"omit information about the type of thing being validated in one clause (as you do"},{"type":"text","text":" "},{"type":"text","text":"when you access "},{"type":"codeVoice","code":"\\.document"},{"type":"text","text":") then you need to indicate the type (perhaps with"},{"type":"text","text":" "},{"type":"text","text":"a KeyPath that includes the full type as in "},{"type":"codeVoice","code":"\\OpenAPI.Document.servers"},{"type":"text","text":" above) in the other clause"},{"type":"text","text":" "},{"type":"text","text":"so the type system knows what you are validating."}]}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/CodingKey"],"title":"Structures"},{"identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/init()"],"title":"Initializers"},{"identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-1rozr","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-5d0t8","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:)","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:when:)","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:when:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/blank"],"title":"Type Properties"}],"abstract":[{"type":"text","text":"A validator that works by traversing an "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" object and validating"},{"type":"text","text":" "},{"type":"text","text":"any values that match an included validation’s type and pass that validation’s"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"hierarchy":{"paths":[["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit"]]},"kind":"symbol","sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"roleHeading":"Class","modules":[{"name":"OpenAPIKit"}],"title":"Validator","role":"symbol","externalID":"s:10OpenAPIKit9ValidatorC","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Validator","kind":"identifier"}],"symbolKind":"class","navigatorTitle":[{"text":"Validator","kind":"identifier"}]},"references":{"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:when:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"validating","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","text":"ValidationContext"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> [","kind":"text"},{"text":"ValidationError","preciseIdentifier":"s:10OpenAPIKit15ValidationErrorV","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"when","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ValidationContext","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"validating(_:when:)","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:when:)","url":"\/documentation\/openapikit\/validator\/validating(_:when:)","type":"topic","abstract":[{"text":"Add a validation to be performed.","type":"text"}],"role":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit":{"kind":"symbol","type":"topic","title":"OpenAPIKit","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","url":"\/documentation\/openapikit","abstract":[],"role":"collection"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/CodingKey":{"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/CodingKey","title":"Validator.CodingKey","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKey"}],"navigatorTitle":[{"kind":"identifier","text":"CodingKey"}],"role":"symbol","kind":"symbol","abstract":[],"url":"\/documentation\/openapikit\/validator\/codingkey"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:)-1rozr":{"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-1rozr","title":"validating(_:)","abstract":[{"type":"text","text":"Add a validation to be performed."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"validating"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","text":"ValidationContext"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> ["},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit15ValidationErrorV","text":"ValidationError"},{"kind":"text","text":"]) -> "},{"kind":"typeIdentifier","text":"Self"}],"url":"\/documentation\/openapikit\/validator\/validating(_:)-1rozr","type":"topic","kind":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/blank":{"url":"\/documentation\/openapikit\/validator\/blank","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"blank","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10OpenAPIKit9ValidatorC","text":"Validator","kind":"typeIdentifier"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/blank","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A validator with no validation rules at all (not"},{"type":"text","text":" "},{"type":"text","text":"even the defaults)."}],"kind":"symbol","title":"blank"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator":{"role":"symbol","type":"topic","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator","abstract":[{"text":"A validator that works by traversing an ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" object and validating","type":"text"},{"text":" ","type":"text"},{"text":"any values that match an included validation’s type and pass that validation’s","type":"text"},{"text":" ","type":"text"},{"text":"predicate.","type":"text"}],"title":"Validator","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Validator","kind":"identifier"}],"navigatorTitle":[{"text":"Validator","kind":"identifier"}],"url":"\/documentation\/openapikit\/validator","kind":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/init()":{"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/init()","title":"init()","abstract":[{"type":"text","text":"Creates the default "},{"code":"Validator","type":"codeVoice"},{"type":"text","text":". Note that"},{"type":"text","text":" "},{"type":"text","text":"this Validator will perform the default validations."},{"type":"text","text":" "},{"type":"text","text":"If you want a Validator that won’t perform any"},{"type":"text","text":" "},{"type":"text","text":"validations except the ones you add, use"},{"type":"text","text":" "},{"code":"Validator.blank","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"url":"\/documentation\/openapikit\/validator\/init()","type":"topic","kind":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:check:when:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:when:)","abstract":[{"text":"Given the description of the correct & valid state being asserted,","type":"text"},{"text":" ","type":"text"},{"text":"create a validation function and add it to the ","type":"text"},{"type":"codeVoice","code":"Validator"},{"text":".","type":"text"}],"title":"validating(_:check:when:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"validating","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"check","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ValidationContext","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"when","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ValidationContext","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"url":"\/documentation\/openapikit\/validator\/validating(_:check:when:)","kind":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:check:)":{"url":"\/documentation\/openapikit\/validator\/validating(_:check:)","role":"symbol","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"validating","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"check","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","text":"ValidationContext","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"validating(_:check:)","kind":"symbol","type":"topic","abstract":[{"text":"Given the description of the correct & valid state being asserted,","type":"text"},{"text":" ","type":"text"},{"text":"create a validation function and add it to the ","type":"text"},{"code":"Validator","type":"codeVoice"},{"text":".","type":"text"}]},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:)-5d0t8":{"type":"topic","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-5d0t8","title":"validating(_:)","role":"symbol","url":"\/documentation\/openapikit\/validator\/validating(_:)-5d0t8","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"validating","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Validation","preciseIdentifier":"s:10OpenAPIKit10ValidationV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Add a validation to be performed."}]}}}