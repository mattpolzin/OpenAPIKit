{"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Validator"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"The default Validator will perform a set of default validations","type":"text"},{"text":" ","type":"text"},{"text":"that catch OpenAPI Specification violations not possible (or inconvenient) to","type":"text"},{"text":" ","type":"text"},{"text":"prevent using the Swift type-system.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"type":"codeListing","syntax":null,"code":["let document = OpenAPI.Document(...)","let validator = Validator()","try document.validate(using: validator)","","\/\/ or, equivalently for the default validator:","try document.validate()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default validations are"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Operations must contain at least one response.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Document-level tag names are unique.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Parameters are unique within each Path Item.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parameters are unique within each Operation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Operation Ids are unique across the whole Document.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"All OpenAPI.References that refer to components in this","type":"text"},{"text":" ","type":"text"},{"text":"document can be found in the components dictionary.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"If you want a Validator that won’t perform any","type":"text"},{"text":" ","type":"text"},{"text":"validations except the ones you add, use","type":"text"},{"text":" ","type":"text"},{"code":"Validator.blank","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can add validations to the validator using the","type":"text"},{"text":" ","type":"text"},{"code":"validating()","type":"codeVoice"},{"text":" instance methods.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few default validations that ship with OpenAPIKit but"},{"type":"text","text":" "},{"type":"text","text":"are not used unless explicitly added to a Validator. You can find these"},{"type":"text","text":" "},{"type":"text","text":"validations as static members of the "},{"type":"codeVoice","code":"Validation"},{"type":"text","text":" type."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"type":"codeListing","syntax":null,"code":["let document = OpenAPI.Document(...)","let validator = Validator()","    .validating(.documentContainsPaths)","    .validating(.pathsContainOperations)","try document.validate(using: validator)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At their core, all validations are values of the "},{"code":"Validation","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type. You can create validations by initializing the "},{"code":"Validation","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type directly but it is generally more convenient to add validations"},{"type":"text","text":" "},{"type":"text","text":"to a Validator using one of the convenience "},{"code":"validating()","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"methods that know how to construct "},{"code":"Validation","type":"codeVoice"},{"type":"text","text":" on your behalf."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you can construct validation methods for simple equalities"},{"type":"text","text":" "},{"type":"text","text":"and inequalities by specifying the KeyPath from any OpenAPI type to"},{"type":"text","text":" "},{"type":"text","text":"the value you want to validate and then writing the equality\/inequality"},{"type":"text","text":" "},{"type":"text","text":"that must succeed for the validation to pass."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Example","type":"text"}],"type":"strong"}]},{"type":"codeListing","syntax":null,"code":["let validator = Validator()","    .validating(","        \"API version is 2.0\",","        check: \\OpenAPI.Document.Info.version == \"2.0\"",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add a "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause to any validation as long as the "},{"code":"check","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause both examine the same type (i.e. "},{"code":"OpenAPI.Document.Info","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"from the previous example and "},{"code":"OpenAPI.Document","type":"codeVoice"},{"type":"text","text":" from the next example)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next example also uses "},{"type":"codeVoice","code":"take()"},{"type":"text","text":"  in its "},{"type":"codeVoice","code":"where"},{"type":"text","text":" caluse. This allows you to"},{"type":"text","text":" "},{"type":"text","text":"dig into a value based on its KeyPath just like the previous example but you can"},{"type":"text","text":" "},{"type":"text","text":"use it for more complicated criteria than equality\/inequality."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, the next example also introduces the context access KayPath syntax in its"},{"type":"text","text":" "},{"type":"codeVoice","code":"check"},{"type":"text","text":" clause. This syntax allows you to access the entire OpenAPI Document"},{"type":"text","text":" "},{"type":"text","text":"that is being validated as "},{"type":"codeVoice","code":"\\.document"},{"type":"text","text":". It also gives you access to the current value"},{"type":"text","text":" "},{"type":"text","text":"being validated as "},{"type":"codeVoice","code":"\\.subject"},{"type":"text","text":" and the current key path as "},{"type":"codeVoice","code":"\\.codingPath"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"type":"codeListing","syntax":null,"code":["let validator = Validator()","    .validating(","        \"At least two servers are specified if one of them is the test server.\",","        check: \\.document.servers.count >= 2,","        when: take(\\OpenAPI.Document.servers) { servers in","            servers.map { $0.url.absoluteString }.contains(\"https:\/\/test.server.com\")","        }",")"]},{"type":"paragraph","inlineContent":[{"text":"Context access, the ","type":"text"},{"code":"take()","type":"codeVoice"},{"text":" method, and the inequality KeyPath syntax are all","type":"text"},{"text":" ","type":"text"},{"text":"allowed in both the ","type":"text"},{"code":"check","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clauses. Just keep in mind that if you","type":"text"},{"text":" ","type":"text"},{"text":"omit information about the type of thing being validated in one clause (as you do","type":"text"},{"text":" ","type":"text"},{"text":"when you access ","type":"text"},{"code":"\\.document","type":"codeVoice"},{"text":") then you need to indicate the type (perhaps with","type":"text"},{"text":" ","type":"text"},{"text":"a KeyPath that includes the full type as in ","type":"text"},{"code":"\\OpenAPI.Document.servers","type":"codeVoice"},{"text":" above) in the other clause","type":"text"},{"text":" ","type":"text"},{"text":"so the type system knows what you are validating.","type":"text"}]}]}],"abstract":[{"type":"text","text":"A validator that works by traversing an "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" object and validating"},{"type":"text","text":" "},{"type":"text","text":"any values that match an included validation’s type and pass that validation’s"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"identifier":{"url":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator","interfaceLanguage":"swift"},"metadata":{"externalID":"s:10OpenAPIKit9ValidatorC","navigatorTitle":[{"kind":"identifier","text":"Validator"}],"title":"Validator","symbolKind":"class","role":"symbol","modules":[{"name":"OpenAPIKit"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Validator"}],"roleHeading":"Class"},"topicSections":[{"title":"Structures","identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/CodingKey"]},{"title":"Initializers","identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/init()"]},{"title":"Instance Methods","identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-1rozr","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-5d0t8","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:)","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:when:)","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:when:)"]},{"title":"Type Properties","identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/blank"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/openapikit\/validator"]}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit"]]},"references":{"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:when:)":{"url":"\/documentation\/openapikit\/validator\/validating(_:when:)","abstract":[{"text":"Add a validation to be performed.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"validating"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"ValidationContext","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">) -> [","kind":"text"},{"preciseIdentifier":"s:10OpenAPIKit15ValidationErrorV","text":"ValidationError","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"when","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","text":"ValidationContext","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:when:)","title":"validating(_:when:)","type":"topic","role":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit":{"abstract":[],"type":"topic","role":"collection","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","kind":"symbol","url":"\/documentation\/openapikit","title":"OpenAPIKit"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/blank":{"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/blank","title":"blank","url":"\/documentation\/openapikit\/validator\/blank","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"blank","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Validator","kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit9ValidatorC"}],"role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"A validator with no validation rules at all (not","type":"text"},{"text":" ","type":"text"},{"text":"even the defaults).","type":"text"}]},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/CodingKey":{"type":"topic","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/CodingKey","title":"Validator.CodingKey","url":"\/documentation\/openapikit\/validator\/codingkey","role":"symbol","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodingKey","kind":"identifier"}],"navigatorTitle":[{"text":"CodingKey","kind":"identifier"}],"kind":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:)-1rozr":{"title":"validating(_:)","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-1rozr","abstract":[{"text":"Add a validation to be performed.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"validating","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"ValidationContext","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> [","kind":"text"},{"text":"ValidationError","preciseIdentifier":"s:10OpenAPIKit15ValidationErrorV","kind":"typeIdentifier"},{"text":"]) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"url":"\/documentation\/openapikit\/validator\/validating(_:)-1rozr","type":"topic","role":"symbol","kind":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:)-5d0t8":{"title":"validating(_:)","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-5d0t8","abstract":[{"text":"Add a validation to be performed.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"validating","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Validation","preciseIdentifier":"s:10OpenAPIKit10ValidationV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"url":"\/documentation\/openapikit\/validator\/validating(_:)-5d0t8","type":"topic","role":"symbol","kind":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator":{"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Validator"}],"url":"\/documentation\/openapikit\/validator","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator","abstract":[{"text":"A validator that works by traversing an ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" object and validating"},{"text":" ","type":"text"},{"type":"text","text":"any values that match an included validation’s type and pass that validation’s"},{"text":" ","type":"text"},{"type":"text","text":"predicate."}],"kind":"symbol","title":"Validator","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Validator"}]},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:check:)":{"type":"topic","abstract":[{"text":"Given the description of the correct & valid state being asserted,","type":"text"},{"text":" ","type":"text"},{"text":"create a validation function and add it to the ","type":"text"},{"type":"codeVoice","code":"Validator"},{"text":".","type":"text"}],"url":"\/documentation\/openapikit\/validator\/validating(_:check:)","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:)","title":"validating(_:check:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"validating","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"check","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ValidationContext","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/init()":{"kind":"symbol","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"title":"init()","type":"topic","url":"\/documentation\/openapikit\/validator\/init()","abstract":[{"type":"text","text":"Creates the default "},{"code":"Validator","type":"codeVoice"},{"text":". Note that","type":"text"},{"text":" ","type":"text"},{"text":"this Validator will perform the default validations.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you want a Validator that won’t perform any"},{"text":" ","type":"text"},{"text":"validations except the ones you add, use","type":"text"},{"type":"text","text":" "},{"code":"Validator.blank","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/init()"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:check:when:)":{"title":"validating(_:check:when:)","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:when:)","abstract":[{"type":"text","text":"Given the description of the correct & valid state being asserted,"},{"type":"text","text":" "},{"type":"text","text":"create a validation function and add it to the "},{"code":"Validator","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"validating"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"check","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ValidationContext","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"when","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ValidationContext","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"url":"\/documentation\/openapikit\/validator\/validating(_:check:when:)","type":"topic","role":"symbol","kind":"symbol"}}}