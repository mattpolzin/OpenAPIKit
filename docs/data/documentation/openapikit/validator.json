{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/openapikit\/validator"]}],"metadata":{"symbolKind":"class","navigatorTitle":[{"text":"Validator","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Validator","kind":"identifier"}],"title":"Validator","modules":[{"name":"OpenAPIKit"}],"role":"symbol","externalID":"s:10OpenAPIKit9ValidatorC","roleHeading":"Class"},"topicSections":[{"title":"Structures","identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/CodingKey"]},{"title":"Initializers","identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/init()"]},{"title":"Instance Methods","identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-1rozr","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-5d0t8","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:)","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:when:)","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:when:)"]},{"title":"Type Properties","identifiers":["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/blank"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Validator","kind":"identifier"}]}]},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default Validator will perform a set of default validations"},{"type":"text","text":" "},{"type":"text","text":"that catch OpenAPI Specification violations not possible (or inconvenient) to"},{"type":"text","text":" "},{"type":"text","text":"prevent using the Swift type-system."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example"}]}]},{"type":"codeListing","code":["let document = OpenAPI.Document(...)","let validator = Validator()","try document.validate(using: validator)","","\/\/ or, equivalently for the default validator:","try document.validate()"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"The default validations are","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Operations must contain at least one response.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Document-level tag names are unique."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parameters are unique within each Path Item."}]}]},{"content":[{"inlineContent":[{"text":"Parameters are unique within each Operation.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Operation Ids are unique across the whole Document.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All OpenAPI.References that refer to components in this"},{"type":"text","text":" "},{"type":"text","text":"document can be found in the components dictionary."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want a Validator that wonâ€™t perform any"},{"type":"text","text":" "},{"type":"text","text":"validations except the ones you add, use"},{"type":"text","text":" "},{"type":"codeVoice","code":"Validator.blank"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add validations to the validator using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"validating()"},{"type":"text","text":" instance methods."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few default validations that ship with OpenAPIKit but"},{"type":"text","text":" "},{"type":"text","text":"are not used unless explicitly added to a Validator. You can find these"},{"type":"text","text":" "},{"type":"text","text":"validations as static members of the "},{"code":"Validation","type":"codeVoice"},{"type":"text","text":" type."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Example","type":"text"}],"type":"strong"}]},{"type":"codeListing","code":["let document = OpenAPI.Document(...)","let validator = Validator()","    .validating(.documentContainsPaths)","    .validating(.pathsContainOperations)","try document.validate(using: validator)"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"At their core, all validations are values of the "},{"type":"codeVoice","code":"Validation"},{"type":"text","text":" "},{"type":"text","text":"type. You can create validations by initializing the "},{"type":"codeVoice","code":"Validation"},{"type":"text","text":" "},{"type":"text","text":"type directly but it is generally more convenient to add validations"},{"type":"text","text":" "},{"type":"text","text":"to a Validator using one of the convenience "},{"type":"codeVoice","code":"validating()"},{"type":"text","text":" "},{"type":"text","text":"methods that know how to construct "},{"type":"codeVoice","code":"Validation"},{"type":"text","text":" on your behalf."}]},{"type":"paragraph","inlineContent":[{"text":"For example, you can construct validation methods for simple equalities","type":"text"},{"text":" ","type":"text"},{"text":"and inequalities by specifying the KeyPath from any OpenAPI type to","type":"text"},{"text":" ","type":"text"},{"text":"the value you want to validate and then writing the equality\/inequality","type":"text"},{"text":" ","type":"text"},{"text":"that must succeed for the validation to pass.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Example","type":"text"}]}]},{"type":"codeListing","code":["let validator = Validator()","    .validating(","        \"API version is 2.0\",","        check: \\OpenAPI.Document.Info.version == \"2.0\"",")"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause to any validation as long as the "},{"type":"codeVoice","code":"check"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause both examine the same type (i.e. "},{"type":"codeVoice","code":"OpenAPI.Document.Info"},{"type":"text","text":" "},{"type":"text","text":"from the previous example and "},{"type":"codeVoice","code":"OpenAPI.Document"},{"type":"text","text":" from the next example)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next example also uses "},{"type":"codeVoice","code":"take()"},{"type":"text","text":"  in its "},{"type":"codeVoice","code":"where"},{"type":"text","text":" caluse. This allows you to"},{"type":"text","text":" "},{"type":"text","text":"dig into a value based on its KeyPath just like the previous example but you can"},{"type":"text","text":" "},{"type":"text","text":"use it for more complicated criteria than equality\/inequality."}]},{"type":"paragraph","inlineContent":[{"text":"Finally, the next example also introduces the context access KayPath syntax in its","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"check"},{"text":" clause. This syntax allows you to access the entire OpenAPI Document","type":"text"},{"text":" ","type":"text"},{"text":"that is being validated as ","type":"text"},{"type":"codeVoice","code":"\\.document"},{"text":". It also gives you access to the current value","type":"text"},{"text":" ","type":"text"},{"text":"being validated as ","type":"text"},{"type":"codeVoice","code":"\\.subject"},{"text":" and the current key path as ","type":"text"},{"type":"codeVoice","code":"\\.codingPath"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Example","type":"text"}],"type":"strong"}]},{"type":"codeListing","code":["let validator = Validator()","    .validating(","        \"At least two servers are specified if one of them is the test server.\",","        check: \\.document.servers.count >= 2,","        when: take(\\OpenAPI.Document.servers) { servers in","            servers.map { $0.url.absoluteString }.contains(\"https:\/\/test.server.com\")","        }",")"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"Context access, the ","type":"text"},{"type":"codeVoice","code":"take()"},{"text":" method, and the inequality KeyPath syntax are all","type":"text"},{"text":" ","type":"text"},{"text":"allowed in both the ","type":"text"},{"type":"codeVoice","code":"check"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clauses. Just keep in mind that if you","type":"text"},{"text":" ","type":"text"},{"text":"omit information about the type of thing being validated in one clause (as you do","type":"text"},{"text":" ","type":"text"},{"text":"when you access ","type":"text"},{"type":"codeVoice","code":"\\.document"},{"text":") then you need to indicate the type (perhaps with","type":"text"},{"text":" ","type":"text"},{"text":"a KeyPath that includes the full type as in ","type":"text"},{"type":"codeVoice","code":"\\OpenAPI.Document.servers"},{"text":" above) in the other clause","type":"text"},{"text":" ","type":"text"},{"text":"so the type system knows what you are validating.","type":"text"}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator"},"abstract":[{"type":"text","text":"A validator that works by traversing an "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" object and validating"},{"type":"text","text":" "},{"type":"text","text":"any values that match an included validationâ€™s type and pass that validationâ€™s"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"references":{"doc://OpenAPIKit/documentation/OpenAPIKit":{"role":"collection","type":"topic","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","title":"OpenAPIKit","url":"\/documentation\/openapikit","abstract":[],"kind":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/init()":{"title":"init()","kind":"symbol","role":"symbol","url":"\/documentation\/openapikit\/validator\/init()","abstract":[{"text":"Creates the default ","type":"text"},{"type":"codeVoice","code":"Validator"},{"text":". Note that","type":"text"},{"text":" ","type":"text"},{"text":"this Validator will perform the default validations.","type":"text"},{"text":" ","type":"text"},{"text":"If you want a Validator that wonâ€™t perform any","type":"text"},{"text":" ","type":"text"},{"text":"validations except the ones you add, use","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Validator.blank"},{"text":".","type":"text"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/init()","type":"topic","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}]},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/blank":{"title":"blank","kind":"symbol","role":"symbol","url":"\/documentation\/openapikit\/validator\/blank","abstract":[{"text":"A validator with no validation rules at all (not","type":"text"},{"text":" ","type":"text"},{"text":"even the defaults).","type":"text"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/blank","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"blank","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit9ValidatorC","text":"Validator"}]},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:check:when:)":{"type":"topic","role":"symbol","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:when:)","url":"\/documentation\/openapikit\/validator\/validating(_:check:when:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"validating"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"check"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","text":"ValidationContext"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"when"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","text":"ValidationContext"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Given the description of the correct & valid state being asserted,"},{"type":"text","text":" "},{"type":"text","text":"create a validation function and add it to the "},{"type":"codeVoice","code":"Validator"},{"type":"text","text":"."}],"title":"validating(_:check:when:)","kind":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/CodingKey":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodingKey","kind":"identifier"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/CodingKey","url":"\/documentation\/openapikit\/validator\/codingkey","kind":"symbol","abstract":[],"title":"Validator.CodingKey","navigatorTitle":[{"kind":"identifier","text":"CodingKey"}],"type":"topic"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:check:)":{"title":"validating(_:check:)","kind":"symbol","role":"symbol","url":"\/documentation\/openapikit\/validator\/validating(_:check:)","abstract":[{"text":"Given the description of the correct & valid state being asserted,","type":"text"},{"text":" ","type":"text"},{"text":"create a validation function and add it to the ","type":"text"},{"code":"Validator","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:check:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"validating","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"check"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","text":"ValidationContext"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}]},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator":{"type":"topic","role":"symbol","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator","url":"\/documentation\/openapikit\/validator","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Validator"}],"abstract":[{"type":"text","text":"A validator that works by traversing an "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" object and validating"},{"type":"text","text":" "},{"type":"text","text":"any values that match an included validationâ€™s type and pass that validationâ€™s"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"title":"Validator","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Validator"}]},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:)-5d0t8":{"type":"topic","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-5d0t8","role":"symbol","url":"\/documentation\/openapikit\/validator\/validating(_:)-5d0t8","kind":"symbol","abstract":[{"type":"text","text":"Add a validation to be performed."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"validating"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"preciseIdentifier":"s:10OpenAPIKit10ValidationV","kind":"typeIdentifier","text":"Validation"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"validating(_:)"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:)-1rozr":{"title":"validating(_:)","url":"\/documentation\/openapikit\/validator\/validating(_:)-1rozr","type":"topic","abstract":[{"type":"text","text":"Add a validation to be performed."}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"validating","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","text":"ValidationContext"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> ["},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit15ValidationErrorV","text":"ValidationError"},{"kind":"text","text":"]) -> "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:)-1rozr"},"doc://OpenAPIKit/documentation/OpenAPIKit/Validator/validating(_:when:)":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/openapikit\/validator\/validating(_:when:)","title":"validating(_:when:)","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/Validator\/validating(_:when:)","abstract":[{"text":"Add a validation to be performed.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"validating","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","text":"ValidationContext"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> ["},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit15ValidationErrorV","text":"ValidationError"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"when"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:10OpenAPIKit17ValidationContextV","text":"ValidationContext"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}]}}}