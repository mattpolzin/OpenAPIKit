{"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"metadata":{"roleHeading":"Instance Property","modules":[{"name":"OpenAPIKit"}],"externalID":"s:10OpenAPIKit10JSONSchemaV11CoreContextV8inferredSbvp","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"inferred"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"inferred","symbolKind":"property"},"identifier":{"url":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct\/inferred","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct"]]},"abstract":[{"text":"A schema is “inferred” if it was not actually parsed as a JSON Schema but rather","type":"text"},{"text":" ","type":"text"},{"text":"inferred to exist based on surroundings.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"inferred","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The only currently known case of this is when we parse a "},{"type":"codeVoice","code":"requried"},{"type":"text","text":" entry in an"},{"type":"text","text":" "},{"type":"text","text":"object and that object has no property with the same name as the requirement."},{"type":"text","text":" "},{"type":"text","text":"We "},{"type":"emphasis","inlineContent":[{"type":"text","text":"infer"}]},{"type":"text","text":" that there is a property by that name (even if only when combined with"},{"type":"text","text":" "},{"type":"text","text":"another schema elsewhere via e.g. "},{"type":"codeVoice","code":"allOf"},{"type":"text","text":"). This inferred schema has no properties"},{"type":"text","text":" "},{"type":"text","text":"except for being required; it can be differentiated from a schema that was explicitly"},{"type":"text","text":" "},{"type":"text","text":"given in the parsed JSON Schema to have no properties via this internal "},{"type":"codeVoice","code":"_inferred"},{"type":"text","text":" "},{"type":"text","text":"boolean."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a non-breaking way to tracking such properties, but a breaking change in the"},{"type":"text","text":" "},{"type":"text","text":"future might very well represent this more elegantly. For example, maybe a requirement"},{"type":"text","text":" "},{"type":"text","text":"without a property definition is not a .fragment schema but rather a new case in that"},{"type":"text","text":" "},{"type":"text","text":"enum."}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/openapikit\/jsonschema\/corecontext-swift.struct\/inferred"]}],"references":{"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchema/CoreContext-swift.struct/inferred":{"kind":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"inferred"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"title":"inferred","url":"\/documentation\/openapikit\/jsonschema\/corecontext-swift.struct\/inferred","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct\/inferred","type":"topic","abstract":[{"type":"text","text":"A schema is “inferred” if it was not actually parsed as a JSON Schema but rather"},{"type":"text","text":" "},{"type":"text","text":"inferred to exist based on surroundings."}],"role":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit":{"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","title":"OpenAPIKit","kind":"symbol","abstract":[],"type":"topic","url":"\/documentation\/openapikit","role":"collection"},"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchema/CoreContext-swift.struct":{"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CoreContext","kind":"identifier"}],"abstract":[{"type":"text","text":"The context that applies to all schemas."}],"title":"JSONSchema.CoreContext","kind":"symbol","url":"\/documentation\/openapikit\/jsonschema\/corecontext-swift.struct","type":"topic","role":"symbol","navigatorTitle":[{"text":"CoreContext","kind":"identifier"}]},"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchema":{"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONSchema","kind":"identifier"}],"abstract":[{"type":"text","text":"OpenAPI “Schema Object”"}],"title":"JSONSchema","kind":"symbol","url":"\/documentation\/openapikit\/jsonschema","type":"topic","role":"symbol","navigatorTitle":[{"text":"JSONSchema","kind":"identifier"}]}}}