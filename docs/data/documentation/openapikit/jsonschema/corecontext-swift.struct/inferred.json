{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"inferred","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"symbolKind":"property","roleHeading":"Instance Property","title":"inferred","modules":[{"name":"OpenAPIKit"}],"role":"symbol","externalID":"s:10OpenAPIKit10JSONSchemaV11CoreContextV8inferredSbvp"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct\/inferred"},"variants":[{"paths":["\/documentation\/openapikit\/jsonschema\/corecontext-swift.struct\/inferred"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"A schema is “inferred” if it was not actually parsed as a JSON Schema but rather"},{"type":"text","text":" "},{"text":"inferred to exist based on surroundings.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"inferred"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"text":"The only currently known case of this is when we parse a ","type":"text"},{"code":"requried","type":"codeVoice"},{"text":" entry in an","type":"text"},{"text":" ","type":"text"},{"text":"object and that object has no property with the same name as the requirement.","type":"text"},{"text":" ","type":"text"},{"text":"We ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"infer","type":"text"}]},{"text":" that there is a property by that name (even if only when combined with","type":"text"},{"text":" ","type":"text"},{"text":"another schema elsewhere via e.g. ","type":"text"},{"code":"allOf","type":"codeVoice"},{"text":"). This inferred schema has no properties","type":"text"},{"text":" ","type":"text"},{"text":"except for being required; it can be differentiated from a schema that was explicitly","type":"text"},{"text":" ","type":"text"},{"text":"given in the parsed JSON Schema to have no properties via this internal ","type":"text"},{"code":"_inferred","type":"codeVoice"},{"text":" ","type":"text"},{"text":"boolean.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This is a non-breaking way to tracking such properties, but a breaking change in the","type":"text"},{"text":" ","type":"text"},{"text":"future might very well represent this more elegantly. For example, maybe a requirement","type":"text"},{"text":" ","type":"text"},{"text":"without a property definition is not a .fragment schema but rather a new case in that","type":"text"},{"text":" ","type":"text"},{"text":"enum.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchema":{"navigatorTitle":[{"text":"JSONSchema","kind":"identifier"}],"title":"JSONSchema","role":"symbol","abstract":[{"type":"text","text":"OpenAPI “Schema Object”"}],"url":"\/documentation\/openapikit\/jsonschema","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONSchema","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema"},"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchema/CoreContext-swift.struct":{"role":"symbol","title":"JSONSchema.CoreContext","abstract":[{"type":"text","text":"The context that applies to all schemas."}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"CoreContext","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CoreContext","kind":"identifier"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct","url":"\/documentation\/openapikit\/jsonschema\/corecontext-swift.struct"},"doc://OpenAPIKit/documentation/OpenAPIKit":{"role":"collection","title":"OpenAPIKit","abstract":[],"kind":"symbol","type":"topic","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","url":"\/documentation\/openapikit"},"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchema/CoreContext-swift.struct/inferred":{"type":"topic","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct\/inferred","abstract":[{"type":"text","text":"A schema is “inferred” if it was not actually parsed as a JSON Schema but rather"},{"type":"text","text":" "},{"type":"text","text":"inferred to exist based on surroundings."}],"role":"symbol","url":"\/documentation\/openapikit\/jsonschema\/corecontext-swift.struct\/inferred","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"inferred","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"kind":"symbol","title":"inferred"}}}