{"metadata":{"symbolKind":"property","modules":[{"name":"OpenAPIKit"}],"fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"inferred","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"externalID":"s:10OpenAPIKit10JSONSchemaV11CoreContextV8inferredSbvp","title":"inferred","roleHeading":"Instance Property","role":"symbol"},"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct"]]},"abstract":[{"text":"A schema is “inferred” if it was not actually parsed as a JSON Schema but rather","type":"text"},{"text":" ","type":"text"},{"text":"inferred to exist based on surroundings.","type":"text"}],"variants":[{"paths":["\/documentation\/openapikit\/jsonschema\/corecontext-swift.struct\/inferred"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct\/inferred","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"inferred","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["Linux"]}]},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"The only currently known case of this is when we parse a ","type":"text"},{"code":"requried","type":"codeVoice"},{"text":" entry in an","type":"text"},{"text":" ","type":"text"},{"text":"object and that object has no property with the same name as the requirement.","type":"text"},{"text":" ","type":"text"},{"text":"We ","type":"text"},{"inlineContent":[{"type":"text","text":"infer"}],"type":"emphasis"},{"text":" that there is a property by that name (even if only when combined with","type":"text"},{"text":" ","type":"text"},{"text":"another schema elsewhere via e.g. ","type":"text"},{"code":"allOf","type":"codeVoice"},{"text":"). This inferred schema has no properties","type":"text"},{"text":" ","type":"text"},{"text":"except for being required; it can be differentiated from a schema that was explicitly","type":"text"},{"text":" ","type":"text"},{"text":"given in the parsed JSON Schema to have no properties via this internal ","type":"text"},{"code":"_inferred","type":"codeVoice"},{"text":" ","type":"text"},{"text":"boolean.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a non-breaking way to tracking such properties, but a breaking change in the"},{"type":"text","text":" "},{"type":"text","text":"future might very well represent this more elegantly. For example, maybe a requirement"},{"type":"text","text":" "},{"type":"text","text":"without a property definition is not a .fragment schema but rather a new case in that"},{"type":"text","text":" "},{"type":"text","text":"enum."}]}],"kind":"content"}],"references":{"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchema/CoreContext-swift.struct/inferred":{"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct\/inferred","url":"\/documentation\/openapikit\/jsonschema\/corecontext-swift.struct\/inferred","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"inferred"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"inferred","abstract":[{"text":"A schema is “inferred” if it was not actually parsed as a JSON Schema but rather","type":"text"},{"text":" ","type":"text"},{"text":"inferred to exist based on surroundings.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchema/CoreContext-swift.struct":{"abstract":[{"text":"The context that applies to all schemas.","type":"text"}],"url":"\/documentation\/openapikit\/jsonschema\/corecontext-swift.struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"CoreContext","kind":"identifier"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema\/CoreContext-swift.struct","navigatorTitle":[{"kind":"identifier","text":"CoreContext"}],"type":"topic","role":"symbol","kind":"symbol","title":"JSONSchema.CoreContext"},"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchema":{"abstract":[{"text":"OpenAPI “Schema Object”","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"JSONSchema","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"JSONSchema"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchema","url":"\/documentation\/openapikit\/jsonschema","type":"topic","title":"JSONSchema","role":"symbol"},"doc://OpenAPIKit/documentation/OpenAPIKit":{"abstract":[],"url":"\/documentation\/openapikit","identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","type":"topic","role":"collection","kind":"symbol","title":"OpenAPIKit"}}}