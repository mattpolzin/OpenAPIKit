{"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"inferred","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The only currently known case of this is when we parse a "},{"type":"codeVoice","code":"requried"},{"type":"text","text":" entry in an"},{"type":"text","text":" "},{"type":"text","text":"object and that object has no property with the same name as the requirement."},{"type":"text","text":" "},{"type":"text","text":"We "},{"inlineContent":[{"type":"text","text":"infer"}],"type":"emphasis"},{"type":"text","text":" that there is a property by that name (even if only when combined with"},{"type":"text","text":" "},{"type":"text","text":"another schema elsewhere via e.g. "},{"type":"codeVoice","code":"allOf"},{"type":"text","text":"). This inferred schema has no properties"},{"type":"text","text":" "},{"type":"text","text":"except for being required; it can be differentiated from a schema that was explicitly"},{"type":"text","text":" "},{"type":"text","text":"given in the parsed JSON Schema to have no properties via this internal "},{"type":"codeVoice","code":"_inferred"},{"type":"text","text":" "},{"type":"text","text":"boolean."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a non-breaking way to tracking such properties, but a breaking change in the"},{"type":"text","text":" "},{"type":"text","text":"future might very well represent this more elegantly. For example, maybe a requirement"},{"type":"text","text":" "},{"type":"text","text":"without a property definition is not a .fragment schema but rather a new case in that"},{"type":"text","text":" "},{"type":"text","text":"enum."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/openapikit\/jsonschemacontext\/inferred"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchemaContext"]]},"sections":[],"identifier":{"url":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchemaContext\/inferred","interfaceLanguage":"swift"},"metadata":{"required":true,"symbolKind":"property","modules":[{"name":"OpenAPIKit"}],"roleHeading":"Instance Property","externalID":"s:10OpenAPIKit17JSONSchemaContextP8inferredSbvp","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"inferred"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"title":"inferred"},"abstract":[{"type":"text","text":"A schema is “inferred” if it was not actually parsed as a JSON Schema but rather"},{"type":"text","text":" "},{"type":"text","text":"inferred to exist based on surroundings."}],"references":{"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchemaContext/inferred":{"title":"inferred","required":true,"abstract":[{"type":"text","text":"A schema is “inferred” if it was not actually parsed as a JSON Schema but rather"},{"text":" ","type":"text"},{"text":"inferred to exist based on surroundings.","type":"text"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchemaContext\/inferred","role":"symbol","url":"\/documentation\/openapikit\/jsonschemacontext\/inferred","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"inferred"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}]},"doc://OpenAPIKit/documentation/OpenAPIKit":{"title":"OpenAPIKit","abstract":[],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit","role":"collection","url":"\/documentation\/openapikit","kind":"symbol","type":"topic"},"doc://OpenAPIKit/documentation/OpenAPIKit/JSONSchemaContext":{"navigatorTitle":[{"text":"JSONSchemaContext","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSONSchemaContext","kind":"identifier"}],"identifier":"doc:\/\/OpenAPIKit\/documentation\/OpenAPIKit\/JSONSchemaContext","role":"symbol","url":"\/documentation\/openapikit\/jsonschemacontext","type":"topic","kind":"symbol","abstract":[{"text":"A schema context stores information about a schema.","type":"text"},{"text":" ","type":"text"},{"text":"All schemas can have the contextual information in","type":"text"},{"text":" ","type":"text"},{"text":"this protocol.","type":"text"}],"title":"JSONSchemaContext"}}}